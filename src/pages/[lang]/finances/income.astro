---
import CalendarIcon from "@/assets/icons/calendar.svg";
import DollarIcon from "@/assets/icons/dollar.svg";
import FilterIcon from "@/assets/icons/filter.svg";
import TrendingUpIcon from "@/assets/icons/trending-up.svg";
import CardMetrics from "@/components/common/CardMetrics.astro";
import CardSections from "@/components/common/CardSections.astro";
import ApexChart from "@/components/finance/IncomeCharts.svelte";
import { getTranslations } from "@/i18n/index";
import Layout from "@/layouts/Layout.astro";
import { type Income, incomeData } from "@/lib/data";

const lang = Astro.params.lang;
const t = getTranslations(lang ?? "es"); // Provide default language if undefined

function transformIncomeData(data: Income[]) {
	const monthNames = [
		"Ene",
		"Feb",
		"Mar",
		"Abr",
		"May",
		"Jun",
		"Jul",
		"Ago",
		"Sep",
		"Oct",
		"Nov",
		"Dic",
	];

	const grouped: Record<string, Record<string, number | string>> = {};

	for (const item of data) {
		const month = monthNames[item.date.getMonth()];
		const year = item.date.getFullYear();
		const category = item.title;
		const amount = item.mount;

		const key = `${year}-${month}`;

		if (!grouped[key]) {
			grouped[key] = {
				year,
				month,
			};
		}

		// Ahora s√≠ podemos indexar con strings sin error
		grouped[key][category] = ((grouped[key][category] as number) || 0) + amount;
	}

	return Object.values(grouped);
}

const chartData = transformIncomeData(incomeData);
---

<Layout title={t.income.title} description={t.income.description}>
  <div class="grid grid-cols-3 gap-4 space-y-1">
    <CardMetrics title={t.income.total_month} value="$3.450" percentage="+8.2%">
      <DollarIcon class="size-4 text-gray-300" slot="icon" />
      {t.income.vs_last_month}
    </CardMetrics>
    <CardMetrics title={t.income.daily_avg} value="$115">
      <TrendingUpIcon class="size-4 text-gray-300" slot="icon" />
      {t.income.based_on_30}
    </CardMetrics>
    <CardMetrics title={t.income.active_sources} value="4">
      <CalendarIcon class="size-4 text-gray-300" slot="icon" />
      {t.income.different_categories}
    </CardMetrics>
    <CardSections title={t.income.income_chart} subtitle={t.income.chart_desc} colSpan="3">
      <div class="min-h-[350px] w-full">
        <ApexChart client:only="svelte" data={chartData} />
      </div>
    </CardSections>
    <CardSections title={t.income.income_history} subtitle={t.income.history_desc} colSpan="3">
      <button
        slot="actions"
        class="bg-secondary hover:bg-tertiary text-dark flex cursor-pointer gap-2 rounded px-3 py-2 text-sm font-semibold"
      >
        <FilterIcon class="size-4" />
        {t.income.filter}
      </button>
      <div class="relative overflow-x-auto">
        <table class="text-light w-full text-left text-sm rtl:text-right">
          <thead class="bg-border text-tertiary uppercase">
            <tr>
              <th scope="col" class="px-6 py-3">{t.income.concept}</th>
              <th scope="col" class="px-6 py-3">{t.income.category}</th>
              <th scope="col" class="px-6 py-3">{t.income.type}</th>
              <th scope="col" class="px-6 py-3">{t.income.date}</th>
              <th scope="col" class="px-6 py-3">{t.income.mount}</th>
            </tr>
          </thead>
          <tbody class="font-light">
            {
              incomeData
                .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
                .map((income) => (
                  <tr class="">
                    <th scope="row" class="whitespace-nowrap px-6 py-4">
                      {income.title}
                    </th>
                    <td class="flex items-center gap-2 px-6 py-4">
                      <span class={`h-4 w-4 rounded-full bg-${income.category.color}-500`} />
                      {income.category.icon} {income.category.name}
                    </td>
                    <td class="px-6 py-4">
                      <span class="bg-tertiary rounded-full px-3 py-1.5">{income.type}</span>
                    </td>
                    <td class="px-6 py-4">{income.date.toLocaleDateString()}</td>
                    <td class="text-success px-6 py-4 font-bold">
                      + ${income.mount.toLocaleString()}
                    </td>
                  </tr>
                ))
            }
          </tbody>
        </table>
      </div>
    </CardSections>
  </div>
  <dialog
    class="bg-surface backdrop:bg-overlay relative mx-auto my-auto rounded p-4 text-center"
    id="add-income-dialog"
    onclick="if (event.target === this) this.close()"
  >
    <form method="dialog">
      <h2 class="text-light text-xl font-medium">Add New Income</h2>
      <p class="text-sm text-gray-400">Add a new income to your financial record</p>
      <button
        class="bg-primary hover:bg-hover text-dark absolute right-1 top-1 size-6 cursor-pointer rounded-full"
        >x</button
      >
    </form>
  </dialog>
  <add-button slot="header-btn">
    <button
      id="add-btn"
      class="bg-secondary text-dark cursor-pointer rounded px-6 py-2 font-semibold"
    >
      + Add
    </button>
  </add-button>
</Layout>
<script>
  const dialog = document.getElementById('add-income-dialog')
  class AddButton extends HTMLElement {
    connectedCallback() {
      const heartButton = this.querySelector('button')

      // Each time the button is clicked, update the count.
      heartButton?.addEventListener('click', () => {
        ;(dialog as HTMLDialogElement).showModal()
      })
    }
  }

  // Tell the browser to use our AddButton class for <astro-heart> elements.
  customElements.define('add-button', AddButton)
</script>
