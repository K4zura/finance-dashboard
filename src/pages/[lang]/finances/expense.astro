---
import CardMetrics from '@/components/common/CardMetrics.astro'
import Layout from '@/layouts/Layout.astro'
import TrendingDownIcon from '@/assets/icons/trending-down.svg'
import FilterIcon from '@/assets/icons/filter.svg'
import AlertIcon from '@/assets/icons/alert.svg'
import CardIcon from '@/assets/icons/card.svg'
import ShoppingIcon from '@/assets/icons/shopping-car.svg'
import CardSections from '@/components/common/CardSections.astro'
import ExpensesByCategory from '@/components/finance/ExpensesByCategory.svelte'
import ProgressBar from '@/components/finance/ProgressBar.svelte'
import { expenseData, expenseCategories } from '@/lib/data'

const expenses = expenseCategories.map((category) => {
  const gastos = expenseData.filter((e) => e.category.name === category.name)
  const spent = gastos.reduce((acc, g) => acc + g.mount, 0)

  return {
    category: category.name,
    spent,
    budget: category.budget,
    color: category.color,
    expenseList: gastos,
  }
})
---

<Layout title="Expense" description="Manage your expense">
  <div class="grid grid-cols-4 gap-4 space-y-1">
    <CardMetrics title="Total of month" value="$3.450" percentage="+8.2%">
      <TrendingDownIcon class="size-4 text-gray-300" slot="icon" />
      vs last month
    </CardMetrics>
    <CardMetrics title="Budget" value="$1150">
      <CardIcon class="size-4 text-gray-300" slot="icon" />
      <ProgressBar />
    </CardMetrics>
    <CardMetrics title="Daily Average" value="$16">
      <ShoppingIcon class="size-4 text-gray-300" slot="icon" />
      Based on 30 days
    </CardMetrics>
    <CardMetrics title="Categories" value="5">
      <AlertIcon class="size-4 text-gray-300" slot="icon" />
      2 over budget
    </CardMetrics>
    <CardSections title="Expenses by Category" subtitle="Budget Tracking by Category" colSpan="4">
      <ExpensesByCategory client:only="svelte" expenses={expenses} />
    </CardSections>
    <CardSections title="Income History" subtitle="Detailed list of all your income" colSpan="4">
      <button
        slot="actions"
        class="bg-secondary hover:bg-tertiary text-dark flex cursor-pointer gap-2 rounded px-3 py-2 text-sm font-semibold"
      >
        <FilterIcon class="size-4" />
        Filter
      </button>
      <div class="relative overflow-x-auto">
        <table class="text-light w-full text-left text-sm rtl:text-right">
          <thead class="bg-border text-tertiary uppercase">
            <tr>
              <th scope="col" class="px-6 py-3"> Concept </th>
              <th scope="col" class="px-6 py-3"> Category </th>
              <th scope="col" class="px-6 py-3"> Frecuency </th>
              <th scope="col" class="px-6 py-3"> Date </th>
              <th scope="col" class="px-6 py-3"> Mount </th>
            </tr>
          </thead>
          <tbody class="font-light">
            {
              expenseData
                .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
                .map((expense) => (
                  <tr class="">
                    <th scope="row" class="whitespace-nowrap px-6 py-4">
                      {expense.title}
                    </th>
                    <td class="flex items-center gap-2 px-6 py-4">
                      <span class={`h-4 w-4 rounded-full bg-${expense.category.color}-500`} />
                      {expense.category.icon} {expense.category.name}
                    </td>
                    <td class="px-6 py-4">
                      <span class="bg-disabled rounded-full px-2 py-1.5">{expense.frequency}</span>
                    </td>
                    <td class="px-6 py-4">{expense.date.toLocaleDateString()}</td>
                    <td class="text-error px-6 py-4 font-bold">
                      - ${expense.mount.toLocaleString()}
                    </td>
                  </tr>
                ))
            }
          </tbody>
        </table>
      </div>
    </CardSections>
  </div>
  <add-button-expense slot="header-btn">
    <dialog
      class="bg-surface backdrop:bg-overlay relative mx-auto my-auto rounded p-4 text-center"
      id="add-expense-dialog"
      onclick="if (event.target === this) this.close()"
    >
      <form method="dialog">
        <h2 class="text-light text-xl font-medium">Add New Expense</h2>
        <p class="text-sm text-gray-400">Add a new Expense to your financial record</p>
        <button
          class="bg-primary hover:bg-hover text-dark absolute right-1 top-1 size-6 cursor-pointer rounded-full"
          >x</button
        >
      </form>
    </dialog>
    <button class="bg-secondary text-dark cursor-pointer rounded px-6 py-2 font-semibold">
      + Add
    </button>
  </add-button-expense>
</Layout>
<script>
  class AddButton extends HTMLElement {
    connectedCallback() {
      const dialoge = this.querySelector('dialog')
      const heartButton = this.querySelector('button')

      // Each time the button is clicked, update the count.
      heartButton?.addEventListener('click', () => {
        ;(dialoge as HTMLDialogElement).showModal()
        console.log('holas')
      })
    }
  }

  // Tell the browser to use our AddButton class for <astro-heart> elements.
  customElements.define('add-button-expense', AddButton)
</script>
